name: Update stats

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  

      - name: Generate stats
        env:
          MY_PAT: ${{ secrets.PAT }}  # Pass the PAT as an environment variable
        run: |
          python stats.py
          if [ $? -ne 0 ]; then
            echo "‚ùå Stats generation failed"
            exit 1
          fi
          
          # Validate that the output files were created and are not empty
          if [ ! -f "fabriziosalmi_github_stats.md" ] || [ ! -s "fabriziosalmi_github_stats.md" ]; then
            echo "‚ùå Output markdown file is missing or empty"
            exit 1
          fi
          
          if [ ! -f "docs/index.html" ] || [ ! -s "docs/index.html" ]; then
            echo "‚ùå Output HTML file is missing or empty"
            exit 1
          fi
          
          echo "‚úÖ Stats generation completed successfully"

      - name: Copy stats to README.md
        run: |
          cp fabriziosalmi_github_stats.md README.md
          if [ $? -ne 0 ]; then
            echo "‚ùå Failed to copy stats to README.md"
            exit 1
          fi
          echo "‚úÖ Successfully copied stats to README.md"

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git pull
          
          # Check if there are actually changes to commit
          if git diff --quiet; then
            echo "‚ÑπÔ∏è No changes detected, skipping commit"
            exit 0
          fi
          
          git add README.md docs/index.html
          git commit -m "Update stats [$(date '+%Y-%m-%d %H:%M UTC')]" || {
            echo "‚ùå Failed to commit changes"
            exit 1
          }
          
          git push || {
            echo "‚ùå Failed to push changes"
            exit 1
          }
          
          echo "‚úÖ Successfully committed and pushed changes"
          
      - name: Create failure issue on error
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const title = `üö® Stats Update Failed - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            The automated stats update failed on ${new Date().toISOString()}.
            
            **Workflow run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            Please check the logs and investigate the issue.
            
            Common causes:
            - GitHub API rate limits exceeded
            - Invalid or expired GitHub token
            - Network connectivity issues
            - Changes in GitHub API response format
            
            This issue will be automatically closed when the next successful run completes.
            `;
            
            // Check if a similar issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['stats-failure', 'automated']
            });
            
            if (issues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['stats-failure', 'automated']
              });
            }
            
      - name: Close previous failure issues on success
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['stats-failure', 'automated']
            });
            
            for (const issue of issues.data) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: '‚úÖ Stats update is now working correctly. Closing this issue automatically.'
              });
            }
